
# 에이전트 작업 처리 프로세스

## 1. 작업 요청 접수 및 분석

### 1.1 요구사항 분석
- 사용자의 요청을 명확하게 이해하고 재정리
- 모호한 부분이나 기술적 선택이 필요한 경우 즉시 사용자에게 질의
  - 예: "Foo 라이브러리의 Bar 함수를 사용하면 성능상 이점이 있을 것 같은데, 이 방향으로 진행해도 될까요?"
- 작업의 목적과 기대효과 명시

### 1.2 기술 명세 작성 및 공유
작업 시작 전 반드시 다음 형식의 기술 명세를 작성하여 사용자와 공유:

```markdown
## 1. 요구사항 분석 및 기술 명세

### 1.1 요구사항 정리
- 사용자가 요청한 작업 내용을 명확하게 재정리
- 요구사항의 목적과 기대효과
- 제약사항이나 고려사항
- 기술적 선택사항 및 그 이유

### 1.2 기술 명세
- 수정이 필요한 파일 목록과 변경 내용
- 필요한 의존성이나 환경 요구사항
- 구현 방식과 아키텍처 설계
- 예상되는 영향도
- 선택한 기술 스택 및 라이브러리와 그 이유

### 1.3 작업 순서
1. 단계별 작업 계획
2. 각 단계의 목적과 결과물
3. 검증 방법
4. 각 단계별 예상 소요 시간

### 1.4 예상되는 결과물
- 완료 후의 상태 설명
- 검증 가능한 결과물 목록
- 성능 및 품질 지표
```

## 2. 작업 실행 프로세스

### 2.1 승인 후 작업 시작
- 기술 명세에 대한 사용자의 승인을 받은 후 작업 시작
- 승인되지 않은 경우 피드백을 반영하여 명세 수정
- 승인 과정에서 추가된 요구사항이나 변경사항 반영

### 2.2 작업 진행
- 명세의 작업 순서대로 진행
- 각 단계 완료 시 결과 보고
- 예상치 못한 문제 발생 시 즉시 보고
- 단계별 진행 상황을 명확하게 공유

### 2.3 결과물 검증
- 명세의 예상 결과물과 비교
- 테스트 및 검증 결과 공유
- 필요시 수정 사항 제안
- 성능 및 품질 지표 검증

## 3. PR 생성 프로세스

### 3.1 PR 준비
- 작업 내용을 1~4개의 영어 단어로 요약하여 브랜치명 결정
  - 예: `add-todo-feature`
  - 예: `fix-auth-bug`
  - 예: `update-ui-components`
  - 예: `refactor-api-client`

### 3.2 브랜치 생성 및 커밋
사용자가 "PR 생성"을 요청한 경우 다음 워크플로우로 진행:

1. main 브랜치 최신화 및 새로운 브랜치 생성
   - main 브랜치로 이동 후 원격 저장소에서 최신 변경사항 가져오기 (git checkout main && git pull)
   - 최신 main 브랜치를 기반으로 새로운 브랜치 생성
   - 작업 내용을 대표하는 의미있는 브랜치명 사용

2. 변경사항 커밋
   - 모든 변경사항을 스테이징
   - 작업 내용을 설명하는 커밋 메시지 작성
   - 변경사항 커밋

3. 원격 저장소에 푸시
   - 새로 생성한 브랜치를 원격 저장소에 푸시
   - 푸시 과정에서 문제 발생시 자동 해결 시도

### 3.3 문제 해결 프로세스
gh, git 등 PR 생성 작업을 진행하며 문제가 발생한경우 다음 내용을 고려:
- 자동으로 해결 가능한 일반적인 상황은 즉시 처리
- 사용자 판단이 필요한 경우 상황 설명 후 해결 방안 제시
- 모든 과정에서 작업 내용 보존을 최우선으로 고려

### 3.4 PR 생성 명령어
```bash
gh pr create \
  --title "[작업 유형] 작업 제목" \
  --body "## 작업 개요
- 목적: [작업의 주요 목적]
- 변경사항: [주요 변경 내용]

## 아키텍처 및 설계 결정
- 선택한 아키텍처/패턴: [설명]
- 대안과 비교: [다른 접근 방식들과 비교]
- 선택 이유: [이 방식을 선택한 이유]

## 기술 스택 및 라이브러리
- 사용/추가된 기술: [기술명과 버전]
- 기술 선택 배경: [왜 이 기술을 선택했는지]
- 향후 확장성: [미래 요구사항 대응 방안]

## 성능 및 보안 고려사항
- 성능 영향: [성능에 미치는 영향]
- 잠재적 이슈: [예상되는 문제점]
- 대응 방안: [이슈 해결을 위한 접근 방법]" \
  --assignee "@me"
```

### 3.5 PR 생성 후 처리
- PR 링크를 사용자에게 공유
- PR 상태 모니터링
- 리뷰어 피드백에 대한 대응 준비

## 4. 문제 해결 원칙

### 4.1 오류 발생 시
1. 오류 상황 명확히 파악
2. 원인 분석 및 해결 방안 도출
3. 해결 방안의 영향도 평가
4. 사용자에게 상황 설명 및 해결 방안 제시

### 4.2 환경 설정 문제
1. 현재 환경 상태 확인
2. 필요한 설정 변경 사항 정리
3. 영구적 해결 방안 우선 제시
4. 임시 해결책이 필요한 경우 그 이유 설명

## 5. 커뮤니케이션 원칙

### 5.1 보고 형식
- 명확하고 구조화된 형식 사용
- 전문 용어 사용 시 설명 추가
- 단계별 진행 상황 공유
- 기술적 결정사항에 대한 근거 제시

### 5.2 질문 및 피드백
- 모호한 부분은 즉시 질문
- 대안이 있는 경우 장단점과 함께 제시
- 사용자의 피드백을 적극적으로 반영
- 기술적 제안 시 근거와 예상 효과 함께 제시

## 6. 품질 관리

### 6.1 코드 품질
- 코딩 컨벤션 준수
- 테스트 코드 작성
- 문서화 및 주석 처리
- 성능 및 보안 고려사항 반영

### 6.2 결과물 검증
- 요구사항 충족 여부 확인
- 성능 및 안정성 검증
- 확장성 및 유지보수성 고려
- 변경 과정에서 발생하는 이슈는 즉시 보고
- 기술 명세는 향후 참조를 위해 명확하게 문서화