---
description: 에이전트의 작업 처리 프로세스를 정의합니다
globs: ["**/*"]
alwaysApply: true
---

# 에이전트 작업 처리 프로세스

## 1. 작업 요청 접수 및 분석

### 1.1 요구사항 분석
- 작업 시작 전 관련된 이전 워크로그 검토 필수
  - 유사한 작업 이력 확인
  - 이전에 시도했던 방법들 검토
  - 발생했던 문제점들 참고
  - 성공/실패 사례 학습
- 사용자의 요청을 명확하게 이해하고 재정리
- 모호한 부분이나 기술적 선택이 필요한 경우 즉시 사용자에게 질의
  - 예: "Foo 라이브러리의 Bar 함수를 사용하면 성능상 이점이 있을 것 같은데, 이 방향으로 진행해도 될까요?"
- 작업의 목적과 기대효과 명시

### 1.2 기술 명세 작성 및 공유
작업 시작 전 반드시 `worklogs/[주제].md` 파일을 생성하여 사용자와 공유.

#### 외부 문서 참조 관리
- 작업 시 참조한 모든 외부 문서의 URL을 워크로그에 기록
  - 예: `@https://capacitorjs.com/docs/ios/configuration`
- 참조한 문서의 핵심 내용을 간단히 요약하여 기록
- 문서의 버전이나 날짜가 중요한 경우 함께 기록
- 해당 문서를 참조한 이유나 적용한 내용을 명시
- 문서와 다르게 적용한 부분이 있다면 그 이유를 설명

#### 워크로그 유형 선택
1. 요구사항 분석 템플릿 (기본)
   - 사용 시점:
     - 새로운 기능 개발
     - 기존 기능 수정/개선
     - 코드베이스에 변경이 필요한 작업
   - 특징:
     - 작업의 목적과 범위 정의
     - 기술적 선택사항 명시
     - 단계별 작업 계획 수립

2. 트러블슈팅 템플릿
   - 사용 시점:
     - 환경 설정 문제 해결
     - 빌드/배포 이슈 대응
     - 외부 서비스 연동 문제
     - 개발 도구/환경 관련 이슈
   - 특징:
     - 문제 상황 명확한 기록
     - 시도한 해결 방안 추적
     - 현재 상태와 다음 단계 명시

#### 워크로그 파일 구조
```
worklogs/
├── capacitor.md     # iOS/Android 앱 래핑 관련 작업
├── auth.md         # 인증/인가 관련 작업
├── database.md     # 데이터베이스 관련 작업
└── deployment.md   # 배포 관련 작업
```

#### 워크로그 파일 명명 규칙
- 의미있는 주제 이름 사용
- 모두 소문자로 작성
- 하이픈(-) 사용 가능
- 예시:
  - `capacitor.md`
  - `oauth-setup.md`
  - `database-migration.md`

#### 워크로그 템플릿 - 요구사항 분석
```markdown
## 1. 요구사항 분석 및 기술 명세

### 1.1 요구사항 정리
- 사용자가 요청한 작업 내용을 명확하게 재정리
- 요구사항의 목적과 기대효과
- 제약사항이나 고려사항

### 1.2 기술 명세
- 수정이 필요한 파일 목록과 구체적인 변경 내용
  - 예시: "package.json에 @capacitor/core@7.0.0 추가" (O)
  - 예시: "iOS 빌드 스크립트 추가" (X)
- 필요한 의존성이나 환경 요구사항
  - 라이브러리 버전 선택 시 다음 우선순위를 **반드시** 따를 것:
    1. 최신 안정 버전(Latest Stable Version) 사용을 최우선으로 함
       - npmjs.com의 latest 태그 기준으로 판단
       - 예: @capacitor/core의 경우 7.4.2 사용 필수 (현재 latest)
    2. 특별한 이유로 하위 버전이 필요한 경우, 반드시 사용자와 상의 후 결정
    3. 버전 선택 시 항상 npmjs.com에서 최신 버전을 확인할 것
    4. 선택한 버전이 최신이 아닌 경우 그 이유를 PR에 명시할 것
- 구현 방식과 아키텍처 설계

### 1.3 작업 순서 및 진행 상황
각 작업 단계별로 다음 정보를 포함하여 실시간으로 업데이트:

1. 작업 단계 1 [상태 이모지]
   - 세부 작업 항목
     ```bash
     # 실행한 명령어
     command arg1 arg2
     ```
   - 발견된 이슈들:
     1. 이슈 설명
        - 원인
        - 해결 방법
   - 해결된 사항:
     1. 완료된 작업 설명
        - 구체적인 변경 내용
        - 적용된 해결책

2. 작업 단계 2 [상태 이모지]
   ...

[상태 이모지 가이드]
✅ - 완료된 작업
⚠️ - 진행 중이며 이슈가 있는 작업
🔄 - 대기 중인 작업
❌ - 실패한 작업/차단된 작업

### 1.4 고려가 필요한 점
- 추가 작업이 예상되는 부분
- 논의가 필요한 부분
- 잠재적 이슈
```

#### 워크로그 관리 원칙
1. 워크로그 활용 전략
   - 새로운 작업 시작 전:
     - 관련 워크로그 파일들을 반드시 검토
     - 이전 시도들과 그 결과 분석
     - 실패한 접근 방식 파악하여 반복 방지
     - 성공한 방법들의 적용 가능성 검토
   - 작업 진행 중:
     - 워크로그를 실시간으로 참고하며 작업
     - 이전 문제 해결 방식 활용
     - 새로운 시도 시 이전 경험 반영

2. 파일 생성 및 업데이트 전략
   - 새로운 워크로그 생성 전 관련 파일 검색
   - 연관된 주제의 워크로그가 있다면:
     - 해당 파일에 내용 추가 또는 업데이트
     - 필요시 파일 제목과 구조 수정하여 포괄적으로 변경
   - 완전히 새로운 주제라면:
     - 새 파일 생성
     - 관련 워크로그 파일이 있다면 상호 참조 추가

2. 파일 위치 및 구조
   - 모든 워크로그는 `worklogs/` 디렉토리에 저장
   - 주제별로 구조화된 파일 관리
   - 연관된 작업은 동일한 파일에서 관리
   - 파일 간 참조가 필요한 경우 명시적으로 링크

3. 실시간 업데이트
   - 작업 진행 상황을 실시간으로 기록
   - 발생한 이슈와 해결 방법 상세히 기록
   - 실행한 명령어와 결과 포함

4. 이슈 추적
   - 모든 이슈는 발생 즉시 기록
   - 해결 방법과 적용 결과 포함
   - 향후 참고를 위한 상세한 설명 추가

5. 명령어 기록
   - 실행한 모든 주요 명령어를 코드 블록으로 기록
   - 명령어의 목적과 결과를 주석으로 설명
   - 환경 설정이나 버전 정보도 함께 기록

6. 문서 품질
   - 명확하고 구조화된 형식 사용
   - 코드 블록과 설명을 적절히 조합
   - 재현 가능한 수준의 상세한 기록 유지
   - 다른 워크로그와의 연관성 명시

### 1.3 작업 로그 관리 원칙

1. 실시간 업데이트
   - 각 작업 단계를 시작할 때 상태 이모지로 진행 상황 표시
   - 명령어 실행 시 실제 사용된 명령어를 코드 블록으로 기록
   - 발생한 이슈는 즉시 기록하고 해결 과정 추적

2. 이슈 기록
   - 발견된 모든 이슈를 시간 순서대로 기록
   - 각 이슈의 원인과 해결 방법을 상세히 설명
   - 해결된 이슈는 체크 표시하되 기록은 유지

3. 작업 이력 관리
   - 모든 주요 변경사항을 시간 순서대로 기록
   - 각 변경사항의 의도와 결과를 명확히 설명
   - 실패한 시도도 기록하여 향후 참고자료로 활용

4. 명령어 기록
   - 실행한 모든 주요 명령어를 코드 블록으로 기록
   - 명령어의 목적과 결과를 주석으로 설명
   - 환경 설정이나 버전 정보도 함께 기록

5. 상태 관리
   - 작업의 현재 상태를 이모지로 명확히 표시
   - 단계별 진행 상황을 실시간으로 업데이트
   - 차단된 작업이나 대기 중인 작업도 명시

## 2. 작업 실행 프로세스

### 2.1 작업 진행
- 기술 명세에 대한 사용자의 승인을 받은 후 작업 시작
- 명세의 작업 순서대로 진행하며 각 단계 완료 시 결과 보고
- 예상치 못한 문제나 변경사항 발생 시 즉시 보고

### 2.2 결과물 검증
- 명세의 예상 결과물과 비교하여 검증
- 필요시 수정 사항 제안

## 3. PR 생성 프로세스

### 3.1 PR 준비
- 작업 내용을 1~4개의 영어 단어로 요약하여 브랜치명 결정
  - 예: `add-todo-feature`
  - 예: `fix-auth-bug`
  - 예: `update-ui-components`
  - 예: `refactor-api-client`

### 3.2 브랜치 생성 및 커밋
다음 상황에서만 PR 생성 프로세스 진행:
1. 사용자가 명시적으로 "PR 생성" 요청한 경우

PR 생성 전 필수 확인사항:
1. staged 상태인 파일 목록 확인
   ```bash
   # staged 파일 목록 확인
   git diff --staged --name-only
   ```
2. staged 파일 중 .mdc 파일이 있는 경우:
   - 파일 변경 내용 재확인
   - 의도하지 않은 변경이 있는 경우 즉시 중단하고 사용자에게 보고

확인 완료 후 다음 워크플로우로 진행:

1. main 브랜치 최신화 및 새로운 브랜치 생성
   - main 브랜치로 이동 후 원격 저장소에서 최신 변경사항 가져오기 (git checkout main && git pull)
   - 최신 main 브랜치를 기반으로 새로운 브랜치 생성
   - 작업 내용을 대표하는 의미있는 브랜치명 사용

2. 변경사항 커밋
   - 모든 변경사항을 스테이징
   - 작업 내용을 설명하는 커밋 메시지 작성
   - 변경사항 커밋

3. 원격 저장소에 푸시
   - 새로 생성한 브랜치를 원격 저장소에 푸시
   - 푸시 과정에서 문제 발생시 자동 해결 시도

### 3.3 문제 해결 프로세스
gh, git 등 PR 생성 작업을 진행하며 문제가 발생한경우 다음 내용을 고려:
- 자동으로 해결 가능한 일반적인 상황은 즉시 처리
- 사용자 판단이 필요한 경우 상황 설명 후 해결 방안 제시
- 모든 과정에서 작업 내용 보존을 최우선으로 고려

### 3.4 PR 작성 가이드라인

#### 브랜치명
- 작업 내용을 1~4개의 영어 단어로 요약
- 명사 또는 동사-명사 형태 사용
- 예시:
  - `add-todo-feature`: 새로운 기능 추가
  - `fix-auth-bug`: 버그 수정
  - `improve-error-handling`: 기존 기능 개선
  - `refactor-api-client`: 코드 구조 개선

#### PR 제목
- 형식: "[작업 유형] 구체적인 작업 내용 설명"
- 작업의 의도와 영향을 명확하게 표현
- 일반적이고 모호한 표현 지양
- 예시:
  - ❌ "[Feature] Update todo feature"
  - ✅ "[Feature] Add drag-and-drop reordering to todo list"
  - ❌ "[Fix] Fix auth bug"
  - ✅ "[Fix] Prevent token expiration during active user session"
  - ❌ "[Rule] Update rule guidelines"
  - ✅ "[Rule] Fix agent's .mdc file editing bugs by enforcing search_replace tool"

#### PR 본문
- 필수 포함 내용:
  - 변경 이유: 왜 이 변경이 필요한지
  - 변경 내용: 무엇을 어떻게 변경했는지
  - 영향 범위: 어떤 파일/기능이 영향을 받는지
  - 테스트 방법: 변경사항을 어떻게 검증할 수 있는지

### 3.5 PR 생성 명령어
```bash
gh pr create \
  --title "[작업 유형] 작업 제목" \
  --body "## 작업 개요
- 목적: [작업의 주요 목적]
- 변경사항: [주요 변경 내용]

## 아키텍처 및 설계 결정
- 선택한 아키텍처/패턴: [설명]
- 대안과 비교: [다른 접근 방식들과 비교]
- 선택 이유: [이 방식을 선택한 이유]

## 기술 스택 및 라이브러리
- 사용/추가된 기술: [기술명과 버전]
- 기술 선택 배경: [왜 이 기술을 선택했는지]
- 향후 확장성: [미래 요구사항 대응 방안]

## 성능 및 보안 고려사항
- 성능 영향: [성능에 미치는 영향]
- 잠재적 이슈: [예상되는 문제점]
- 대응 방안: [이슈 해결을 위한 접근 방법]" \
  --assignee "@me"
```

### 3.6 PR 생성 후 처리
- PR 링크를 사용자에게 공유
- PR 상태 모니터링
- 리뷰어 피드백에 대한 대응 준비

### 3.7 PR 머지 정책
- 모든 PR은 반드시 squash 머지로 진행
  ```bash
  # PR 머지 명령어
  gh pr merge [PR번호] --squash --delete-branch
  ```
- 머지 후 로컬/원격 브랜치 자동 삭제 (--delete-branch 옵션 필수)
- 일반 머지나 rebase 머지 사용 금지
- 이유:
  - 커밋 히스토리 깔끔하게 유지
  - 관련 변경사항을 하나의 커밋으로 묶어서 관리
  - 롤백이 필요한 경우 용이한 처리

## 4. 문제 해결 및 커뮤니케이션

### 4.1 문제 해결 원칙
- 오류 상황 명확히 파악하고 원인 분석
- 해결 방안의 영향도 평가 후 사용자에게 제시
- 환경 설정 문제는 영구적 해결 방안 우선 제시

### 4.2 커뮤니케이션 원칙
- 명확하고 구조화된 형식으로 보고
- 전문 용어 사용 시 설명 추가
- 대안이 있는 경우 장단점과 함께 제시
- 기술적 제안 시 근거와 예상 효과 제시

## 5. 품질 관리

### 5.1 코드 품질 및 결과물 검증
- 코딩 컨벤션 준수
- 성능, 보안, 확장성 고려
- 변경 과정에서 발생하는 이슈는 즉시 보고

### 5.2 코드 수정 원칙
- 최소 변경 원칙 준수
  - 요청된 변경사항에만 집중
  - 불필요한 코드 재작성 지양
  - 기존 코드의 의도와 맥락 유지

- 변경 범위 명확화
  - 수정이 필요한 부분을 명확히 식별
  - 연관된 부분에 미치는 영향 검토
  - 의도하지 않은 변경사항 방지

- 단계별 검증
  1. 변경 전 코드의 기능과 스타일 파악
  2. 최소한의 변경으로 목적 달성
  3. 변경 후 원래 기능과 스타일이 유지되는지 확인

- 리팩토링 시 주의사항
  - 순수 리팩토링과 기능 변경을 분리
  - 리팩토링이 필요한 경우 사용자와 상의
  - UI 변경이 포함된 경우 반드시 스크린샷 비교

### 5.3 변경사항 문서화
- 각 변경사항의 목적과 영향 범위 기록
- 예상치 못한 변경이 발생한 경우 즉시 보고
- 변경 전/후 비교 자료 제공 (필요시 스크린샷 포함)

### 5.4 코드 리뷰 체크리스트
변경사항 적용 전 다음 사항 확인:
- [ ] 요청된 변경사항만 포함되었는가?
- [ ] 기존 기능이 그대로 유지되는가?
- [ ] UI/스타일링이 의도치 않게 변경되지 않았는가?
- [ ] 연관된 테스트가 모두 통과하는가?
- [ ] 성능에 부정적 영향을 주지 않는가?
```


```

#### 워크로그 템플릿 - 트러블슈팅
```markdown
## [문제 제목]

### 1. 환경 정보
- OS: [운영체제 정보]
- 관련 도구/버전: [도구명과 버전]
- 프로젝트: [관련 프로젝트/모듈]
- 문제 발생 시점: [날짜 또는 특정 이벤트]

### 2. 시도한 작업 및 결과

1. [작업 1] [상태 이모지]
   ```bash
   # 실행한 명령어
   command arg1 arg2
   ```
   - 결과: [성공/실패/부분 성공]
   - [추가 세부사항]
   - [발생한 에러 메시지]

2. [작업 2] [상태 이모지]
   - 시도한 내용
   - 결과
   - 문제점 또는 에러

### 3. 현재 상태
- [현재 상황 요약]
- [블로커 또는 제약사항]
- [영향받는 기능/범위]

### 4. 다음 단계
1. [다음에 시도할 작업]
   - [세부 단계]
   - [필요한 준비사항]

### 5. 참고사항
- [유용한 문서/링크]
- [주의사항]
- [제약사항]
```