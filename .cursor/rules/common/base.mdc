---
description: 에이전트의 작업 처리 프로세스를 정의합니다
globs: ["**/*"]
alwaysApply: true
---

# 에이전트 작업 처리 프로세스

## 1. 작업 요청 접수 및 분석

### 1.1 요구사항 분석
- 사용자의 요청을 명확하게 이해하고 재정리
- 모호한 부분이 있다면 즉시 질문으로 명확화
- 작업의 목적과 기대효과 명시

### 1.2 기술 명세 작성 및 공유
작업 시작 전 반드시 다음 형식의 기술 명세를 작성하여 사용자와 공유:

```markdown
## 1. 요구사항 분석 및 기술 명세

### 1.1 요구사항 정리
- 사용자가 요청한 작업 내용을 명확하게 재정리
- 요구사항의 목적과 기대효과
- 제약사항이나 고려사항

### 1.2 기술 명세
- 수정이 필요한 파일 목록과 변경 내용
- 필요한 의존성이나 환경 요구사항
- 구현 방식과 아키텍처 설계
- 예상되는 영향도

### 1.3 작업 순서
1. 단계별 작업 계획
2. 각 단계의 목적과 결과물
3. 검증 방법

### 1.4 예상되는 결과물
- 완료 후의 상태 설명
- 검증 가능한 결과물 목록
```

## 2. 작업 실행 프로세스

### 2.1 승인 후 작업 시작
- 기술 명세에 대한 사용자의 승인을 받은 후 작업 시작
- 승인되지 않은 경우 피드백을 반영하여 명세 수정

### 2.2 작업 진행
- 명세의 작업 순서대로 진행
- 각 단계 완료 시 결과 보고
- 예상치 못한 문제 발생 시 즉시 보고

### 2.3 결과물 검증
- 명세의 예상 결과물과 비교
- 테스트 및 검증 결과 공유
- 필요시 수정 사항 제안

## 3. 문제 해결 원칙

### 3.1 오류 발생 시
1. 오류 상황 명확히 파악
2. 원인 분석 및 해결 방안 도출
3. 해결 방안의 영향도 평가
4. 사용자에게 상황 설명 및 해결 방안 제시

### 3.2 환경 설정 문제
1. 현재 환경 상태 확인
2. 필요한 설정 변경 사항 정리
3. 영구적 해결 방안 우선 제시
4. 임시 해결책이 필요한 경우 그 이유 설명

## 4. 커뮤니케이션 원칙

### 4.1 보고 형식
- 명확하고 구조화된 형식 사용
- 전문 용어 사용 시 설명 추가
- 단계별 진행 상황 공유

### 4.2 질문 및 피드백
- 모호한 부분은 즉시 질문
- 대안이 있는 경우 함께 제시
- 사용자의 피드백을 적극적으로 반영

## 5. 품질 관리

### 5.1 코드 품질
- 코딩 컨벤션 준수
- 테스트 코드 작성
- 문서화 및 주석 처리

### 5.2 결과물 검증
- 요구사항 충족 여부 확인
- 성능 및 안정성 검증
- 확장성 및 유지보수성 고려
- 변경 과정에서 발생하는 이슈는 즉시 보고
- 기술 명세는 향후 참조를 위해 명확하게 문서화
- CLI 도구 사용 시 항상 에러 메시지 전체를 분석
- 환경 설정 변경 시 영구적 해결책 우선 고려
- 버전이나 요구사항 관련 숫자는 항상 정확히 확인