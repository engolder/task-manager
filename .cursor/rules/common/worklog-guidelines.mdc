---
description: 효과적인 워크로그 작성 가이드라인
globs: ["worklogs/**/*.md"]
alwaysApply: true
---

# 워크로그 작성 가이드라인

## 1. 워크로그 작성 원칙

### 1.1 기본 원칙
- 작업 시작 전 관련된 이전 워크로그 검토 필수
  - 유사한 작업 이력 확인
  - 이전에 시도했던 방법들 검토
  - 발생했던 문제점들 참고
  - 성공/실패 사례 학습
- 작업 시 참조한 모든 외부 문서의 URL을 워크로그에 기록
- 참조한 문서의 핵심 내용을 간단히 요약하여 기록
- 문서의 버전이나 날짜가 중요한 경우 함께 기록
- 해당 문서를 참조한 이유나 적용한 내용을 명시
- 문서와 다르게 적용한 부분이 있다면 그 이유를 설명

### 1.2 워크로그 유형 선택
1. **요구사항 분석 템플릿** (기본)
   - 사용 시점:
     - 새로운 기능 개발
     - 기존 기능 수정/개선
     - 코드베이스에 변경이 필요한 작업
   - 특징:
     - 작업의 목적과 범위 정의
     - 기술적 선택사항 명시
     - 단계별 작업 계획 수립

2. **트러블슈팅 템플릿**
   - 사용 시점:
     - 환경 설정 문제 해결
     - 빌드/배포 이슈 대응
     - 외부 서비스 연동 문제
     - 개발 도구/환경 관련 이슈
   - 특징:
     - 문제 상황 명확한 기록
     - 시도한 해결 방안 추적
     - 현재 상태와 다음 단계 명시

### 1.3 워크로그 파일 관리

#### 1.3.1 파일 구조
```
worklogs/
├── capacitor.md     # iOS/Android 앱 래핑 관련 작업
├── auth.md         # 인증/인가 관련 작업
├── database.md     # 데이터베이스 관련 작업
└── deployment.md   # 배포 관련 작업
```

#### 1.3.2 파일 명명 규칙
- 의미있는 주제 이름 사용
- 모두 소문자로 작성
- 하이픈(-) 사용 가능
- 예시:
  - `capacitor.md`
  - `oauth-setup.md`
  - `database-migration.md`

### 1.4 워크로그 관리 원칙
1. **파일 생성 및 업데이트 전략**
   - 새로운 워크로그 생성 전 관련 파일 검색
   - 연관된 주제의 워크로그가 있다면:
     - 해당 파일에 내용 추가 또는 업데이트
     - 필요시 파일 제목과 구조 수정하여 포괄적으로 변경
   - 완전히 새로운 주제라면:
     - 새 파일 생성
     - 관련 워크로그 파일이 있다면 상호 참조 추가

2. **파일 위치 및 구조**
   - 모든 워크로그는 `worklogs/` 디렉토리에 저장
   - 주제별로 구조화된 파일 관리
   - 연관된 작업은 동일한 파일에서 관리
   - 파일 간 참조가 필요한 경우 명시적으로 링크

3. **실시간 업데이트**
   - 작업 진행 상황을 실시간으로 기록
   - 발생한 이슈와 해결 방법 상세히 기록
   - 실행한 명령어와 결과 포함

4. **이슈 추적**
   - 모든 이슈는 발생 즉시 기록
   - 해결 방법과 적용 결과 포함
   - 향후 참고를 위한 상세한 설명 추가

5. **명령어 기록**
   - 실행한 모든 주요 명령어를 코드 블록으로 기록
   - 명령어의 목적과 결과를 주석으로 설명
   - 환경 설정이나 버전 정보도 함께 기록

6. **문서 품질**
   - 명확하고 구조화된 형식 사용
   - 코드 블록과 설명을 적절히 조합
   - 재현 가능한 수준의 상세한 기록 유지
   - 다른 워크로그와의 연관성 명시

## 2. 워크로그 구조화 원칙

### 2.1 논리적 흐름 구성
워크로그는 **기본 → 문제점 → 해결책 → 최적화**의 흐름으로 구성:

1. **기본 실행 방법**
   - 준비사항
   - 공식 문서 기준 실행 방법
   - 기본 개발 방법

2. **자동화 스크립트 개발 과정**
   - 문제점 식별
   - 자동화 스크립트 구현
   - 스크립트 정리

3. **최종 개발 워크플로우**
   - 간단한 사용법
   - 실제 명령어

4. **트러블슈팅** (별도 섹션)
   - 문제-원인-해결 구조

5. **핵심 교훈**
   - 설계 의도와 가치

### 2.2 실용성 중심 작성
- **실제 사용법 우선**: 이론보다는 실제 명령어와 단계
- **간결한 설명**: 핵심 내용에 집중
- **명령어 포함**: 실행 가능한 코드 블록 제공

## 3. 워크로그 작성 템플릿

### 3.1 요구사항 분석 템플릿 (기본)
```markdown
## 1. 요구사항 분석 및 기술 명세

### 1.1 요구사항 정리
- 사용자가 요청한 작업 내용을 명확하게 재정리
- 요구사항의 목적과 기대효과
- 제약사항이나 고려사항

### 1.2 기술 명세
- 수정이 필요한 파일 목록과 구체적인 변경 내용
  - 예시: "package.json에 @capacitor/core@7.0.0 추가" (O)
  - 예시: "iOS 빌드 스크립트 추가" (X)
- 필요한 의존성이나 환경 요구사항
  - 라이브러리 버전 선택 시 다음 우선순위를 **반드시** 따를 것:
    1. 최신 안정 버전(Latest Stable Version) 사용을 최우선으로 함
       - npmjs.com의 latest 태그 기준으로 판단
       - 예: @capacitor/core의 경우 7.4.2 사용 필수 (현재 latest)
    2. 특별한 이유로 하위 버전이 필요한 경우, 반드시 사용자와 상의 후 결정
    3. 버전 선택 시 항상 npmjs.com에서 최신 버전을 확인할 것
    4. 선택한 버전이 최신이 아닌 경우 그 이유를 PR에 명시할 것
- 구현 방식과 아키텍처 설계

### 1.3 작업 순서 및 진행 상황
각 작업 단계별로 다음 정보를 포함하여 실시간으로 업데이트:

1. 작업 단계 1 [상태 이모지]
   - 세부 작업 항목
     ```bash
     # 실행한 명령어
     command arg1 arg2
     ```
   - 발견된 이슈들:
     1. 이슈 설명
        - 원인
        - 해결 방법
   - 해결된 사항:
     1. 완료된 작업 설명
        - 구체적인 변경 내용
        - 적용된 해결책

2. 작업 단계 2 [상태 이모지]
   ...

[상태 이모지 가이드]
✅ - 완료된 작업
⚠️ - 진행 중이며 이슈가 있는 작업
🔄 - 대기 중인 작업
❌ - 실패한 작업/차단된 작업

### 1.4 고려가 필요한 점
- 추가 작업이 예상되는 부분
- 논의가 필요한 부분
- 잠재적 이슈
```

### 3.2 트러블슈팅 템플릿
```markdown
## [문제 제목]

### 1. 환경 정보
- OS: [운영체제 정보]
- 관련 도구/버전: [도구명과 버전]
- 프로젝트: [관련 프로젝트/모듈]
- 문제 발생 시점: [날짜 또는 특정 이벤트]

### 2. 시도한 작업 및 결과

1. [작업 1] [상태 이모지]
   ```bash
   # 실행한 명령어
   command arg1 arg2
   ```
   - 결과: [성공/실패/부분 성공]
   - [추가 세부사항]
   - [발생한 에러 메시지]

2. [작업 2] [상태 이모지]
   - 시도한 내용
   - 결과
   - 문제점 또는 에러

### 3. 현재 상태
- [현재 상황 요약]
- [블로커 또는 제약사항]
- [영향받는 기능/범위]

### 4. 다음 단계
1. [다음에 시도할 작업]
   - [세부 단계]
   - [필요한 준비사항]

### 5. 참고사항
- [유용한 문서/링크]
- [주의사항]
- [제약사항]
```

### 3.3 기본 구조
```markdown
## [작업 제목]

### 1. 기본 실행 방법

#### 1.1 준비사항
- 필요한 도구/환경
- 필수 설정

#### 1.2 공식 문서 기준 실행 방법
```bash
# 단계별 명령어
command1
command2
command3
```

#### 1.3 [특정 기능] 개발 방법
```bash
# 특정 기능을 위한 명령어
command1
command2
```

### 2. 자동화 스크립트 개발 과정

#### 2.1 문제점 식별
- 반복되는 수동 작업
- 불편한 점들
- 실수하기 쉬운 부분

#### 2.2 자동화 스크립트 구현
```bash
# 최종 자동화 스크립트
yarn command
```

**동작 과정:**
1. 단계 1
2. 단계 2
3. 단계 3

#### 2.3 스크립트 정리
```
scripts/
├── utils/           # 공통 유틸리티
├── main-script.js   # 메인 스크립트
└── other-script.js  # 기타 스크립트
```

**정리 이유:**
- 중복 코드 제거
- 공통 기능 재사용
- 향후 확장 시 편의성

### 3. 최종 개발 워크플로우

#### 3.1 [주요 기능] 개발
```bash
yarn command
# 간단한 설명
```

#### 3.2 [기타 기능]
```bash
yarn command
# 간단한 설명
```

### 4. 트러블슈팅

#### 4.1 [문제 제목]
**문제**: 구체적인 문제 상황
**원인**: 문제의 원인
**해결**: 해결 방법

### 5. 핵심 교훈

#### 5.1 [도메인] 특성
- 도메인별 특성 이해
- 중요한 개념들

#### 5.2 자동화의 가치
- 개발자 경험 향상
- 실수 방지
- 일관성 보장

#### 5.3 [기술] 정리의 이점
- 중복 코드 제거
- 공통 기능 재사용
- 향후 확장 시 편의성

### 6. 현재 상태
- ✅ 완료된 작업들
- ⚠️ 주의사항
- 🔄 진행 중인 작업

### 7. 다음 단계
1. 다음 작업 1
2. 다음 작업 2

### 8. 참고 문서
- @[URL] - 문서 제목
```

## 4. 작성 원칙

### 4.1 명령어 기록
- **실제 실행한 명령어**: 복사해서 바로 사용 가능
- **결과 포함**: 성공/실패 여부와 출력
- **환경 정보**: OS, 버전 등 컨텍스트

### 4.2 문제 해결 과정
- **문제 상황**: 구체적인 에러 메시지나 증상
- **시도한 방법**: 여러 해결책 시도 과정
- **최종 해결책**: 실제로 작동한 방법
- **교훈**: 향후 유사한 문제 방지 방법

### 4.3 설계 의도 문서화
- **왜 그렇게 했는지**: 기술적 선택의 이유
- **대안과 비교**: 다른 접근 방식과의 비교
- **장단점**: 선택한 방식의 장점과 단점

## 5. 실시간 업데이트

### 5.1 작업 진행 중
- 각 단계별 상태 이모지 사용
- 실행한 명령어 즉시 기록
- 발생한 이슈 즉시 기록

### 5.2 상태 이모지 가이드
- ✅ - 완료된 작업
- ⚠️ - 진행 중이며 이슈가 있는 작업
- 🔄 - 대기 중인 작업
- ❌ - 실패한 작업/차단된 작업

## 6. 외부 문서 참조

### 6.1 참조 문서 기록
- **URL 포함**: `@https://example.com`
- **핵심 내용 요약**: 문서의 주요 내용
- **적용한 내용**: 실제로 사용한 부분
- **버전 정보**: 문서의 버전이나 날짜

### 6.2 참조 이유 명시
- 왜 이 문서를 참조했는지
- 어떤 문제 해결을 위해 사용했는지
- 다른 문서와의 차이점

## 7. 품질 관리

### 7.1 검증 체크리스트
- [ ] 실제 실행 가능한 명령어인가?
- [ ] 문제 해결 과정이 명확한가?
- [ ] 설계 의도가 잘 설명되었는가?
- [ ] 외부 문서 참조가 적절한가?
- [ ] 향후 참고하기에 충분한가?

### 7.2 지속적 개선
- 실제 사용하면서 발견한 문제점 기록
- 더 나은 방법 발견 시 업데이트
- 팀 피드백 반영

## 8. 모범 사례

### 8.1 좋은 예시
```markdown
#### 1.2 공식 문서 기준 실행 방법
```bash
# 1. 웹앱 빌드
yarn build

# 2. iOS 프로젝트 동기화
npx cap sync ios

# 3. Xcode에서 프로젝트 열기
npx cap open ios
```

#### 2.1 문제점 식별
- 매번 IP 주소 확인 → 설정 변경 → 동기화 → Xcode 열기 과정 반복
- 네트워크 환경 변경 시 IP 주소 수동 업데이트 필요
- 여러 단계의 명령어를 순서대로 실행해야 함
```

### 8.2 피해야 할 예시
```markdown
# ❌ 나쁜 예시
- 복잡한 과정을 거쳐서 iOS 앱을 실행할 수 있습니다
- 여러 설정을 변경해야 합니다
- 문제가 발생할 수 있습니다

# ✅ 좋은 예시
```bash
yarn ios:dev
# 하나의 명령어로 모든 과정 자동화
```