---
description: Cursor 룰 작성을 위한 공통 가이드라인과 모범 사례를 정의합니다
globs: [".cursor/rules/**/*.mdc"]
alwaysApply: true
---

# Cursor 룰 작성 가이드라인

## 기본 구조

### 1. 메타데이터 (YAML 프론트매터)
```yaml
description: 룰의 목적과 역할을 명확하게 설명
globs: ["적용될 파일 패턴"]
alwaysApply: true/false
```

- **description**: 룰의 목적을 명확하게 설명
- **globs**: 룰이 적용될 파일 패턴 (glob 패턴 사용)
- **alwaysApply**: 항상 적용할지 여부

### 2. 디렉토리 구조
```
.cursor/rules/
├── frontend/          # 프론트엔드 관련 룰
├── backend/           # 백엔드 관련 룰
├── database/          # 데이터베이스 관련 룰
├── devops/            # DevOps 관련 룰
└── common/            # 공통 룰
```

## 작성 규칙

### 1. 파일 명명 규칙
- 의미있는 이름 사용
- 소문자와 하이픈 사용 (예: `code-style.mdc`)
- 영역을 나타내는 접두사 사용 가능 (예: `react-components.mdc`)

### 2. 내용 구성
1. 메타데이터 (YAML 프론트매터)
2. 개요 및 목적
3. 세부 규칙
4. 예시 코드 (필요한 경우)
5. 참고사항

### 3. 규칙 작성 방식
- 명확하고 구체적인 지침 제공
- 예시와 함께 설명
- 안티 패턴도 함께 제시
- 실제 코드 스니펫 포함

## 모범 사례

### 1. 좋은 예시
```yaml
---
description: 리액트 컴포넌트 작성 규칙
globs: ["src/**/*.tsx", "src/**/*.jsx"]
alwaysApply: true
---

# 컴포넌트 작성 규칙
...구체적인 규칙 내용...
```

### 2. 피해야 할 예시
```yaml
---
description: 코드 규칙 # ❌ 너무 모호함
globs: ["*"] # ❌ 너무 광범위함
alwaysApply: true
---

# 규칙 # ❌ 구체적이지 않음
...
```

## 룰 적용 범위

### 1. glob 패턴 작성법
- **디렉토리 기반 구분 (권장)**
  ```yaml
  # ✅ 좋은 예시 - 디렉토리로 명확하게 구분
  globs: ["frontend/**/*"]  # frontend 디렉토리 내 모든 파일
  ```
  - 장점:
    - 명확한 경계
    - 설정 파일 자동 포함
    - 실수로 다른 영역 침범 방지
    - 유지보수 용이

- **파일 확장자 기반 구분 (비권장)**
  ```yaml
  # ❌ 피해야 할 예시 - 확장자로만 구분
  globs: [
    "src/**/*.{ts,tsx}",
    "package.json",
    "!server/**/*"
  ]
  ```
  - 단점:
    - 복잡한 예외 처리 필요
    - 설정 파일 누락 가능성
    - 유지보수 어려움
    - 실수로 잘못된 파일 포함 가능

- 기타 패턴 예시:
  - 특정 확장자: `**/*.{ts,tsx}`
  - 특정 디렉토리: `src/**/*`
  - 특정 파일 제외: `!node_modules/**/*`
  - 복합 패턴: `["src/**/*.ts", "!src/**/*.test.ts"]`

### 2. 적용 우선순위
1. 더 구체적인 패턴이 우선
2. 나중에 정의된 룰이 우선
3. `alwaysApply: true`가 우선

## 유지보수

### 1. 룰 업데이트
- 정기적인 검토 및 업데이트
- 변경사항 문서화
- 팀 합의 후 변경

### 2. 버전 관리
- Git으로 관리
- 변경 이력 기록
- 중요 변경사항 커밋 메시지에 명시

## 효과적인 룰 작성 팁

### 1. 명확성
- 모호한 표현 피하기
- 구체적인 예시 제공
- 이유와 배경 설명

### 2. 실용성
- 실제 적용 가능한 규칙 작성
- 팀의 현재 상황 고려
- 점진적 개선 가능하도록 설계

### 3. 유연성
- 예외 상황 고려
- 너무 엄격한 규칙 피하기
- 팀 논의를 통한 조정 가능성 열어두기

## 룰 파일 수정 도구 사용 가이드라인

### 1. 도구 선택
### .mdc 파일 수정 규칙

1. 도구 선택
   - .mdc 파일 수정 시 **반드시** `search_replace` 도구만 사용
   - `edit_file` 도구 사용 **절대 금지**
   - 이유: YAML 프론트매터 손상 및 콘텐츠 중복 버그 발생 위험

2. 수정 전 필수 확인사항
   - 파일이 .mdc로 끝나는지 확인
   - 수정하려는 정확한 위치와 내용 파악
   - 충분한 컨텍스트(수정 지점 전후 3-5줄) 포함

3. 수정 과정
   - 한 번에 하나의 변경만 수행
   - YAML 프론트매터는 수정하지 않음
   - 변경 전 `read_file` 도구로 현재 내용 확인

4. 위반 시 조치사항
   - 즉시 작업 중단
   - 변경사항 롤백
   - 올바른 도구(`search_replace`)로 재시도
- `edit_file` 도구 사용 금지 (YAML 프론트매터 손상 및 콘텐츠 중복 버그 발생)

### 2. `search_replace` 도구 사용법
- 정확한 문자열 매칭을 위해 충분한 컨텍스트 포함 (수정 지점 전후 3-5줄)
- 한 번에 하나의 변경만 수행
- YAML 프론트매터는 수정하지 않음

### 3. 예시
```typescript
// ✅ 좋은 예시 - 충분한 컨텍스트와 함께 search_replace 사용
search_replace({
  file_path: "path/to/rule.mdc",
  old_string: `### 이전 섹션
내용 1
내용 2

### 다음 섹션`,
  new_string: `### 이전 섹션
새로운 내용 1
새로운 내용 2

### 다음 섹션`
});

// ❌ 나쁜 예시 - 컨텍스트 부족
search_replace({
  file_path: "path/to/rule.mdc",
  old_string: "내용 1",
  new_string: "새로운 내용 1"
});
```

## 룰 파일 수정 프로세스

### 1. 룰 파일 선택 우선순위
1. 기본 룰 파일
   - `common/base.mdc`: 에이전트의 기본 동작 정의
   - `common/rules.mdc`: 룰 작성 방법 정의

2. 특정 영역의 룰
   - 각 룰 파일의 description을 확인하여 적절한 파일 선택
   - 해당하는 파일이 없는 경우, 사용자와 상의하여 새로운 룰 파일 생성

### 2. 룰 수정 절차
1. 수정 내용 작성
   - 변경 사항을 명확하게 정리
   - 변경 내용의 영향도 평가

### 3. .mdc 파일 수정 시 주의사항
- 반드시 `search_replace` 도구를 사용할 것 (`edit_file` 도구 사용 시 YAML 프론트매터 손상)
- YAML 프론트매터는 수정하지 않음

## 문서화

### 1. 주석 작성
```yaml
# 이 룰은 프로젝트의 코드 스타일을 정의합니다.
---
description: 코드 스타일 가이드라인
globs: ["**/*.{ts,tsx}"]
alwaysApply: true
---
```

### 2. 예시 포함
- 좋은 예시와 나쁜 예시 함께 제시
- 실제 코드 스니펫 사용
- 설명이 필요한 부분에 주석 추가

## 협업

### 1. 팀 리뷰
- 새로운 룰 추가 시 팀 리뷰
- 피드백 수렴
- 합의를 통한 결정

### 2. 문제 해결
- 룰 적용 시 발생하는 문제 기록
- 해결 방안 문서화
- 필요시 룰 수정

## 상호작용 시나리오

### 1. 새로운 룰 생성 요청
- 사용자가 rules.mdc를 기반으로 새로운 룰 파일(예: foo.mdc) 생성 요청
- Cursor는 rules.mdc의 가이드라인을 따라 새로운 룰 파일 생성
- 메타데이터, 구조, 작성 규칙 등을 준수하여 작성

### 2. 룰 수정 요청
- 사용자가 생성된 룰 파일(foo.mdc)에 대한 수정사항 요청
- Cursor는 요청된 수정사항을 해당 룰 파일에 반영

### 3. 일반화된 수정사항 반영
- 수정 요청 중 일반적으로 적용 가능한 내용 식별
- 일반화된 내용을 rules.mdc에 반영하여 향후 룰 작성에 참고
- 이를 통해 rules.mdc는 지속적으로 개선되고 발전

## 코드와 룰의 동기화

### 1. 코드 변경에 따른 룰 업데이트
- 코드베이스가 변경될 때 관련 룰도 함께 업데이트
- 더 이상 유효하지 않은 예시나 설명 제거
- 새로운 코드 패턴이나 구조를 반영하여 룰 수정

### 2. 업데이트 프로세스
- 코드 변경 시 관련 룰 파일 검토
- 룰의 예시 코드가 최신 코드베이스와 일치하는지 확인
- 필요한 경우 새로운 예시 추가 또는 기존 예시 수정
- 변경된 코드 구조나 패턴을 룰에 반영

### 3. 동기화 검증
- 정기적으로 룰의 예시와 실제 코드베이스 비교
- 더 이상 사용되지 않는 패턴이나 구조 식별
- 새롭게 도입된 패턴이나 구조가 룰에 반영되었는지 확인

이 가이드라인을 따라 Cursor 룰을 작성하면 일관성 있고 효과적인 코드 품질 관리가 가능합니다.